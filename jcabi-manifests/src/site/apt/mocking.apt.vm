 ------
 Mocking MANIFEST.MF Attributes in Unit Tests
 ------
 Yegor Bugayenko
 ------
 2012-12-2
 ------

~~
~~ #set($sign="$")
~~ #set($hash="#")
~~ Copyright (c) 2012, jcabi.com
~~ All rights reserved.
~~
~~ Redistribution and use in source and binary forms, with or without
~~ modification, are permitted provided that the following conditions
~~ are met: 1) Redistributions of source code must retain the above
~~ copyright notice, this list of conditions and the following
~~ disclaimer. 2) Redistributions in binary form must reproduce the above
~~ copyright notice, this list of conditions and the following
~~ disclaimer in the documentation and/or other materials provided
~~ with the distribution. 3) Neither the name of the jcabi.com nor
~~ the names of its contributors may be used to endorse or promote
~~ products derived from this software without specific prior written
~~ permission.
~~
~~ THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
~~ "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
~~ NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
~~ FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
~~ THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
~~ INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
~~ (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
~~ SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
~~ HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
~~ STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
~~ ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
~~ OF THE POSSIBILITY OF SUCH DAMAGE.
~~

Mocking <<<MANIFEST.MF>>> Attributes in Unit Tests

  {{{./apidocs-${project.version}/com/jcabi/manifests/Manifests.html}<<<Manifests>>>}}
  is a utility class with static only methods. The main motivation
  for this design is the nature of <<<MANIFEST.MF>>> files &mdas; they are
  global for the entire Java Virtual Machine. In other words, they are read-only
  {{{http://en.wikipedia.org/wiki/Global_variable}global variables}}.

  In order to simplify unit-testing and mocking the
  {{{./apidocs-${project.version}/com/jcabi/manifests/Manifests.html}<<<Manifests>>>}}
  class has a few supplementary methods and mechanisms. The first one
  is
  {{{./apidocs-${project.version}/com/jcabi/manifests/Manifests.html}<<<inject()>>>}},
  which allows you to overwrite any <<<MANIFEST.MF>>> attribute. Let's say
  we have a <<<Database>>> class that is an adapter between
  a relational MySQL database and all other classes in the application:

+--
public class Database {
  private Connection connection;
  public Database() {
    String url = Manifests.read("Jdbc-Url");
    this.connection = DriverManager.getConnection(url);
  }
  public Employee getById(int id) {
    // load Employee from the database using
    // provided ID as primary key
    return employee;
  }
}
+--

  The <<<Database>>> class gets JDBC URL from <<<MANIFEST.MF>>>. Now we
  want to test the class without interacting with real MySQL database. In other
  words we want to break this dependency and mock database behavior. We can use
  an {{{http://www.h2database.com/html/features.html${hash}in_memory_databases}in-memory H2 database}}
  and inject its URL into
  {{{./apidocs-${project.version}/com/jcabi/manifests/Manifests.html}<<<Manifests>>>}}:

+--
public class DatabaseTest {
  @Test
  public void makesDatabaseConnection() {
    Manifests.inject("Jdbc-Url", "jdbc:h2:mem:temp-database");
    Database db = new Database();
    Employee emp = db.getById(1);
    assertThat(emp.name(), notNullValue());
  }
}
+--

  {{{./apidocs-${project.version}/com/jcabi/manifests/Manifests.html}<<<inject()>>>}}
  method makes <<<MANIFEST.MF>>> attributes available for writing.

  Since
  {{{./apidocs-${project.version}/com/jcabi/manifests/Manifests.html}<<<Manifests>>>}}
  is a registry of global attributes a change made to one of them in one unit test
  will affect all other tests, if they rely on the same attribute.
  Thus, it's a good practice to
  {{{./apidocs-${project.version}/com/jcabi/manifests/Manifests.html}<<<inject()>>>}}
  in <<<setUp()>>> and clean after yourself in <<<tearDown()>>>. We have two convenient
  methods for this:
  {{{./apidocs-${project.version}/com/jcabi/manifests/Manifests.html}<<<snapshot()>>>}}
  and
  {{{./apidocs-${project.version}/com/jcabi/manifests/Manifests.html}<<<revert()>>>}}.
  The <<<DatabaseTest>>> unit test could be re-written as
  following:

+--
public class DatabaseTest {
  private static byte[] manifests;
  @BeforeClass
  public static void setUp() {
    DatabaseTest.manifests = Manifests.snapshot();
    Manifests.inject("Jdbc-Url", "jdbc:h2:mem:temp-database");
  }
  @AfterClass
  public static void tearDown() {
    Manifests.revert(DatabaseTest.manifests);
  }
  @Test
  public void makesDatabaseConnection() {
    Database db = new Database();
    Employee emp = db.getById(1);
    assertThat(emp.name(), notNullValue());
  }
}
+--

  This is a good practice to do it like this, since it protects other
  tests against broken dependencies (which are very difficult to fix later).

