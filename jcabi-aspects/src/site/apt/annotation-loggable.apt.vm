 ------
 Logging Java method executions
 ------
 Yegor Bugayenko
 ------
 2013-01-06
 ------

~~
~~ Copyright (c) 2011, jcabi.com
~~ All rights reserved.
~~
~~ Redistribution and use in source and binary forms, with or without
~~ modification, are permitted provided that the following conditions
~~ are met: 1) Redistributions of source code must retain the above
~~ copyright notice, this list of conditions and the following
~~ disclaimer. 2) Redistributions in binary form must reproduce the above
~~ copyright notice, this list of conditions and the following
~~ disclaimer in the documentation and/or other materials provided
~~ with the distribution. 3) Neither the name of the jcabi.com nor
~~ the names of its contributors may be used to endorse or promote
~~ products derived from this software without specific prior written
~~ permission.
~~
~~ THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
~~ "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
~~ NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
~~ FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
~~ THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
~~ INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
~~ (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
~~ SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
~~ HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
~~ STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
~~ ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
~~ OF THE POSSIBILITY OF SUCH DAMAGE.
~~

Logging Java method executions

  Annotate your methods with
  {{{./apidocs-${project.version}/com/jcabi/aspects/Loggable.html}<<<@Loggable>>>}}
  annotation and every time they are called your SLF4J logging
  facility will receive a message with the details of execution and total
  execution time:

+--
public class Resource {
  @Loggable(Loggable.DEBUG)
  public String load(URL url) {
    return url.openConnection().getContent();
  }
}
+--

  Something like this will appear in the log:

+--
[DEBUG] #load('http://www.google.com'): returned "<html ..." in 23ms
+--

  If a method throws an exception it is also logged.

  Method <<<toString()>>> of your method arguments and its return value is
  used to compose a log line. Too long texts are trimmed to 100 characters,
  in order to make log lines compact. Since version 0.7.13 it's possible
  to disable this trimming mechanism with an extra <<<trim>>> argument
  of the annotation.

  Since version 0.7.13 an entire class can be annotated. In this case all
  methods will be logged (except <<<toString()>>>, <<<hashCode()>>>,
  and <<<equals(Object)>>>):

+--
public class Resource {
  @Loggable(Loggable.DEBUG)
  public class Foo {
    // all methods of the class will be logged
  }
}
+--

  If both a class and a method are annotated, method annotation has a higher
  priority.

  Since version 0.7.6 you can specify a time limit in seconds, as a maximum
  execution time of a method. If this limit is reached a logging level is
  increased to WARN and method slowness is reported. Since version 0.7.14 you
  can change time unit as well:

+--
public class Resource {
  @Loggable(limit = 200, unit = TimeUnit.MILLISECONDS)
  public void run() {
    // something that should not take more than 200 msec
  }
}
+--

  Since version 0.7.16 you can get log lines not only when method
  execution is done, but also when it is just started:

+--
public class Resource {
  @Loggable(prepend = true)
  public void run() {
    // something that takes too long
  }
}
+--

  In this case two log lines will be recorded, one when the method is
  just started and another one when it returns the output.

  Since version 0.7.18 you can ignore certain exception types. They won't
  be logged when thrown and won't polute the log. Sometimes exceptions don't
  mean fatal errors and should not be visible in logs, for example in
  JAX-RS applications where
  {{{http://docs.oracle.com/javaee/6/api/javax/ws/rs/WebApplicationException.html}<<<WebApplicationException>>>}}
  is used to redirect a user
  to another page and is not an indicator of an application error:

+--
@Path("/")
public class JaxRsResource {
  @GET
  @Loggable(ignore = WebApplicationException.class)
  public String get() {
    if (/* not a logged in user */) {
      throw new WebApplicationException(Response.seeOther(/* URI */));
    }
  }
}
+--

  The mechanism is implemented with AOP/AspectJ. Read
  {{{./index.html}how to integrate it into your <<<pom.xml>>>}}.
