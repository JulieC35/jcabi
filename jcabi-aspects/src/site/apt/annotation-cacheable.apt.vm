 ------
 Caching Java method results
 ------
 Yegor Bugayenko
 ------
 2013-01-11
 ------

~~
~~ Copyright (c) 2013, jcabi.com
~~ All rights reserved.
~~
~~ Redistribution and use in source and binary forms, with or without
~~ modification, are permitted provided that the following conditions
~~ are met: 1) Redistributions of source code must retain the above
~~ copyright notice, this list of conditions and the following
~~ disclaimer. 2) Redistributions in binary form must reproduce the above
~~ copyright notice, this list of conditions and the following
~~ disclaimer in the documentation and/or other materials provided
~~ with the distribution. 3) Neither the name of the jcabi.com nor
~~ the names of its contributors may be used to endorse or promote
~~ products derived from this software without specific prior written
~~ permission.
~~
~~ THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
~~ "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
~~ NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
~~ FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
~~ THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
~~ INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
~~ (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
~~ SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
~~ HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
~~ STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
~~ ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
~~ OF THE POSSIBILITY OF SUCH DAMAGE.
~~

Caching Java method results

  Annotate your methods with
  {{{./apidocs-${project.version}/com/jcabi/aspects/Cacheable.html}<<<@Cacheable>>>}}
  annotation and their responses will be cached (duplicate calculations
  will be avoided):

+--
public class Resource {
  @Cacheable(lifetime = 5, unit = TimeUnit.SECONDS)
  public String load(URL url) {
    return url.openConnection().getContent();
  }
}
+--

  If you call this method, say, every second, only every 5th call
  will make a real HTTP connection. The other four will return
  cached value. Cache is maintained in memory in a hash map.

  You can make a value cacheable forever (method's result will
  never expire):

+--
public class MyResource {
  @Cacheable(forever = true)
  public List<String> data() {
    List<String> data = new ArrayList<String>();
    // some heavy calculations to be done only
    // once per JVM lifetime
    return data;
  }
}
+--

  If a method throws an exception, it is not cached.

  Since version 0.7.14 you can also annotate methods that should flush
  object's cache, for example:

+--
public class Page {
  @Cacheable
  public String get() {
    // load data from external source, e.g. the network
    return data;
  }
  @Cacheable.Flush
  public void set(String data) {
    // save data to the network
  }
}
+--

  Since 0.7.18 you can flush before or after the call using
  {{{./apidocs-${project.version}/com/jcabi/aspects/Cacheable.html}<<<@Cacheable.FlushBefore>>>}}
  and
  {{{./apidocs-${project.version}/com/jcabi/aspects/Cacheable.html}<<<@Cacheable.FlushAfter>>>}}.

  Be aware of a potential problem with caching of mutable object. For example,
  if a method return a <<<HashSet>>> and then you change it, a new call to
  the same method will return a modified set. Not the one originally cached.
  We strongly recommend to make sure that you cache only immutable objects:

+--
public class Employees {
  @Cacheable
  public Set<Employee> all() {
    Set<Employee> employees = new HashSet<Employee>();
    // pay attention to the use of unmodifiableSet(), which
    // turns a mutable HashSet into an immutable one
    return Collections.unmodifiableSet(employees);
  }
}
+--

  If you need a more fine-tunable mechanism we recommend to use
  {{{http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/cache/package-summary.html}Google Guava}}.
  Also, pay attention to {{{https://github.com/jsr107/jsr107spec}JSR-107}}, which is
  a new coming Java caching standard.

  The mechanism is implemented with AOP/AspectJ. Read
  {{{./index.html}how to integrate it into your <<<pom.xml>>>}}.
