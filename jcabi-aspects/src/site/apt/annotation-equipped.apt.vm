 ------
 Add hashCode(), equals(), and toString() to a Java class in runtime
 ------
 Yegor Bugayenko
 ------
 2013-02-24
 ------

~~
~~ Copyright (c) 2013, jcabi.com
~~ All rights reserved.
~~
~~ Redistribution and use in source and binary forms, with or without
~~ modification, are permitted provided that the following conditions
~~ are met: 1) Redistributions of source code must retain the above
~~ copyright notice, this list of conditions and the following
~~ disclaimer. 2) Redistributions in binary form must reproduce the above
~~ copyright notice, this list of conditions and the following
~~ disclaimer in the documentation and/or other materials provided
~~ with the distribution. 3) Neither the name of the jcabi.com nor
~~ the names of its contributors may be used to endorse or promote
~~ products derived from this software without specific prior written
~~ permission.
~~
~~ THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
~~ "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
~~ NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
~~ FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
~~ THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
~~ INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
~~ (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
~~ SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
~~ HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
~~ STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
~~ ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
~~ OF THE POSSIBILITY OF SUCH DAMAGE.
~~

Add hashCode(), equals(), and toString() to a Java class in runtime

  Annotate your class with
  {{{./apidocs-${project.version}/com/jcabi/aspects/Equipped.html}<<<@Equipped>>>}}
  annotation and three methods
  <<<hashCode()>>>, <<<equals()>>>, and <<<toString()>>>
  will be added to it in runtime:

+--
@Equipped
public class Foo {
  private final String data;
}
+--

  <<<hashCode()>>> is implemented as:

+--
@Override
public int hashCode() {
  return this.data.hashCode();
}
+--

  <<<equals()>>> is implemented as:

+--
@Override
public boolean equals(final Object obj) {
  boolean equals;
  if (this == obj) {
      equals = true;
  } else if (obj instanceof Foo) {
      final Foo foo = Foo.class.cast(obj);
      equals = foo.data.equals(this.data);
  } else {
      equals = false;
  }
  return equals;
}
+--

  <<<toString()>>> is implemented as:

+--
@Override
public String toString() {
  return String.format("data=[%s]", this.data);
}

  Similar idea is implemneted by
  {{{http://projectlombok.org/features/index.html}Lombok library}}, but in
  a different way (without AOP).

  The mechanism is implemented with AOP/AspectJ. Read
  {{{./index.html}how to integrate it into your <<<pom.xml>>>}}.
